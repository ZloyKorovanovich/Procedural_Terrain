#pragma kernel GenerateHeightMap

RWTexture2D<float> HeightMap;

uint Resolution;
int Octaves;
float Scale;
float Lacunarity;
float Persistance;
float2 Shift;

float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

float Noise(float2 UV, float scale)
{
    return unity_gradientNoise(UV * scale) + 0.5;
}

float GradientNoise(float2 coord, float scale)
{
    return Noise(coord.xy, scale);
}

[numthreads(32, 32, 1)]
void GenerateHeightMap (uint3 id : SV_DispatchThreadID)
{
    float scale = Scale;
    float strength = 0.5f;
    float constantScale =  1.0f / float(Resolution);

    float height = 0;

    float2 coord = Shift * Resolution + float2(id.xy);

    for(int i = 0; i < Octaves; i++)
    {
         height += GradientNoise(coord, float(scale) * constantScale) * strength;
         scale *= Lacunarity;
         strength *= Persistance;
    }

    HeightMap[id.xy] = height;
}

