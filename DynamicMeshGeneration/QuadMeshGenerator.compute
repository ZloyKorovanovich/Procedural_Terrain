#pragma kernel GenerateQuad

RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<int> Triangles;

float Scale;
int Width;

float3 CalculatePosition(int xIndex, int yIndex, float scale)
{
    float3 output;
    output.x = xIndex * scale;
    output.y = yIndex * scale;
    output.z = 0.0f * scale;
    return output;
}

[numthreads(16,1,1)]
void GenerateQuad (uint3 id : SV_DispatchThreadID)
{
    int xIndex = id.x % (Width + 1);
    int yIndex = id.x / (Width + 1);

    Vertices[id.x] = CalculatePosition(xIndex, yIndex, Scale);

    int shift = yIndex;
    int shiftBound = Width - yIndex;
    if(xIndex >= shiftBound && yIndex != Width)
        shift = yIndex + 1;

    int triId = id.x * 6;

    Triangles[triId + 0] = id.x + 0 + shift;
    Triangles[triId + 1] = id.x + Width + 1 + shift;
    Triangles[triId + 2] = id.x + 1 + shift;

    Triangles[triId + 3] = id.x + 1 + shift;
    Triangles[triId + 4] = id.x + Width + 1 + shift;
    Triangles[triId + 5] = id.x + Width + 2 + shift;
}

